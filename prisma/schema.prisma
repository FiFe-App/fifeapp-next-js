generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model sale {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  author         String
  title          String
  description    String
  category       Int
  created_at     DateTime       @default(now()) @db.Timestamp
  interestedBy   Json[]
  imagesDesc     String[]
  imagesBookable Boolean[]
  saleInterest   saleInterest[]
}

model saleInterest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  author     String
  message    String
  sale       sale     @relation(fields: [saleId], references: [id])
  saleId     String   @db.ObjectId
  created_at DateTime @default(now()) @db.Timestamp
}

model place {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  location    Float[]
  title       String
  description String
  category    Int
  uploaded_by String
  created_at  DateTime @default(now()) @db.Timestamp
  likes       user[]
  like        like[]

  @@index([category])
}

model LatLng {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  lat Float
  lng Float
}

model event {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  date       DateTime
  endDate    DateTime
  author     String
  lat        Float
  lng        Float
  place      String   @db.ObjectId
  likes      String[]
  category   Int
  attributes String[]
  created_at DateTime @default(now()) @db.Timestamp

  @@index([place])
}

model user {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  uid        String     @unique
  name       String
  username   String
  title      String?
  page       page?      @relation(fields: [pageId], references: [id])
  pageId     String?    @db.ObjectId
  place      place?     @relation(fields: [placeId], references: [id])
  placeId    String?    @db.ObjectId
  documents  document[]
  image      String?
  created_at DateTime?  @default(now()) @db.Timestamp
}

model page {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  uid        String?    @unique
  background String?
  buziness   buziness[]
  images     images[]
  texts      text[]
  location   Float[]

  user user[]
}

model buziness {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  page        page     @relation(fields: [pageId], references: [id])
  pageId      String   @db.ObjectId
  uid         String
  name        String
  description String
  location    Float[]
  images      String[]
}

model trade {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  user1      String
  user2      String
  message1   String?
  message2   String?
  accepted   Boolean
  buzinessId String? @db.ObjectId
}

model images {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  page   page     @relation(fields: [pageId], references: [id])
  pageId String   @db.ObjectId
  images String[]
  texts  String[]
}

model text {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  page   page   @relation(fields: [pageId], references: [id])
  pageId String @db.ObjectId
  text   String
}

model location {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  //age   page   @relation(fields: [pageId], references: [id])
  //pageId String @unique @db.ObjectId // relation scalar field (used in the `@relation` attribute above)
  lat   Float
  lng   Float
  title String
}

model like {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  uid     String
  place   place  @relation(fields: [placeId], references: [id])
  placeId String @db.ObjectId
}

model friendship {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt

  uid  String
  uid2 String

  allowed Boolean?
}

model document {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  author   user    @relation(fields: [authorId], references: [id])
  authorId String  @db.ObjectId
  active   Boolean

  category   String
  color      String?
  title      String
  text       String
  image      String?
  forms      Json
  created_at DateTime @default(now()) @db.Timestamp
}

model blog {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  author String

  title      String
  text       String
  created_at DateTime @default(now()) @db.Timestamp
}
